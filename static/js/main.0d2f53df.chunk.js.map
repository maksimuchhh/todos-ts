{"version":3,"sources":["graphqlRequests.ts","components/Header/Header.tsx","components/List/List.tsx","components/Error/Error.tsx","App.tsx","index.tsx"],"names":["getAllTodosGraphql","gql","addTodoGraphql","removeTodoGraphql","updateTodoGraphql","Header","props","className","List","todos","removeTodo","toggleTodo","length","map","el","ListItem","dense","button","divider","onClick","id","ListItemIcon","Checkbox","checked","completed","ListItemText","primary","title","style","textDecoration","undefined","ListItemSecondaryAction","IconButton","Error","error","Snackbar","anchorOrigin","vertical","horizontal","open","variant","severity","graphqlRequests","App","useState","setTodos","input","setInput","setError","loading","setLoading","useQuery","allTodos","data","getAllTodosLoading","useMutation","addTodo","addTodoLoading","removeTodoLoading","toggleTodoLoading","useEffect","getAllTodos","setTimeout","LinearProgress","autoComplete","onSubmit","evt","preventDefault","variables","then","prev","catch","err","message","TextField","width","label","color","value","onChange","target","CSSTransition","in","timeout","classNames","filter","updateTodo","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"8PA0Ce,GACbA,mBA1CyBC,cAAH,8GA2CtBC,eAjCqBD,cAAH,sJAkClBE,kBAxBwBF,cAAH,8IAyBrBG,kBAfwBH,cAAH,+I,yBCrBRI,EARU,SAACC,GACxB,OACE,iCACE,oBAAIC,UAAU,OAAd,sB,wECgDSC,G,OArCmB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WACtD,OAAIF,GAA0B,IAAjBA,EAAMG,OAEf,oBAAIL,UAAU,YAAd,SACGE,EAAMI,KAAI,SAACC,GACV,OACE,eAACC,EAAA,EAAD,CAEEC,OAAK,EACLC,QAAM,EACNC,SAAO,EACPC,QAAS,kBAAMR,EAAWG,EAAGM,KAL/B,UAOE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAUC,QAAST,EAAGU,cAExB,cAACC,EAAA,EAAD,CACEC,QAASZ,EAAGa,MACZC,MACEd,EAAGU,UAAY,CAAEK,eAAgB,qBAAmBC,IAGxD,cAACC,EAAA,EAAD,CAAyBZ,QAAS,kBAAMT,EAAWI,EAAGM,KAAtD,SACE,cAACY,EAAA,EAAD,CAAYzB,UAAU,gBAAtB,SACE,cAAC,IAAD,CAAYA,UAAU,sBAjBrBO,EAAGM,SA0BX,qBAAKb,UAAU,uBAAf,6B,kBC7BI0B,EAbD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MACf,OACE,cAACC,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,OAAQL,EAFV,SAIE,cAAC,IAAD,CAAUM,QAAQ,SAASC,SAAS,QAApC,SACGP,OCEPlC,EAIE0C,EAJF1C,mBACAE,EAGEwC,EAHFxC,eACAC,EAEEuC,EAFFvC,kBACAC,EACEsC,EADFtC,kBAgIauC,EA9HgB,WAAO,IAAD,EACTC,mBAAiB,IADR,mBAC5BnC,EAD4B,KACrBoC,EADqB,OAETD,mBAAiB,IAFR,mBAE5BE,EAF4B,KAErBC,EAFqB,OAGTH,mBAAwB,MAHf,mBAG5BV,EAH4B,KAGrBc,EAHqB,OAKLJ,oBAAkB,GALb,mBAK5BK,EAL4B,KAKnBC,EALmB,OAOqBC,mBACtDnD,GADYoD,EAPqB,EAO3BC,KAAyBC,EAPE,EAOXL,QAPW,EAWYM,sBAAYrD,GAXxB,mBAW5BsD,EAX4B,KAWRC,EAXQ,KAWjBR,QAXiB,EAYkBM,sBACnDpD,GAbiC,mBAY5BO,EAZ4B,KAYLgD,EAZK,KAYdT,QAZc,EAekBM,sBACnDnD,GAhBiC,mBAe5BO,EAf4B,KAeLgD,EAfK,KAedV,QA2ErB,OA/BAW,qBAAU,WACHR,GAGLP,EAAQ,OAACO,QAAD,IAACA,OAAD,EAACA,EAAUS,eAClB,CAACT,IAEJQ,qBAAU,WACJ1B,GACF4B,YAAW,kBAAMd,EAAS,QAAO,OAElC,CAACd,IAEJ0B,qBAAU,WAONV,KALAO,GACAC,GACAJ,IACsB,IAAtBK,MAMD,CACDF,EACAC,EACAJ,EACAK,IAIA,qCACGV,EAAU,cAACc,EAAA,EAAD,CAAgBxD,UAAU,WAAc,KACnD,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAO2B,MAAOA,IAEd,sBAAM8B,aAAa,MAAMC,SA9ET,SAACC,GACrBA,EAAIC,iBACCrB,GAKLU,EAAQ,CACNY,UAAW,CACTzC,MAAO,CAAEA,MAAOmB,MAGjBuB,MAAK,YAAe,IAAZhB,EAAW,EAAXA,KACPR,GAAS,SAACyB,GAAD,OAAWjB,EAAKG,SAAhB,mBAA4Bc,UAEtCC,OAAM,SAACC,GAAD,OAASxB,EAASwB,EAAIC,YAE/B1B,EAAS,KAdPC,EAAS,mBA2EP,SACE,cAAC0B,EAAA,EAAD,CACEtD,GAAG,iBACHQ,MAAO,CACL+C,MAAO,QAETC,MAAM,gBACNpC,QAAQ,WACRqC,MAAM,UACNC,MAAOhC,EACPiC,SAAU,SAACb,GAAD,OAASnB,EAASmB,EAAIc,OAAOF,YAG3C,cAACG,EAAA,EAAD,CACEC,GAAqB,IAAjBzE,EAAMG,OACVuE,QAAS,IACTC,WAAW,kBAHb,SAKE,cAAC,EAAD,CACE3E,MAAOA,EACPC,WA9Ee,SAACU,GACxBV,EAAW,CACT0D,UAAW,CACThD,GAAIA,KAGLiD,MAAK,kBAAMxB,GAAS,SAACyB,GAAD,OAAUA,EAAKe,QAAO,SAACvE,GAAD,OAAQA,EAAGM,KAAOA,WAC5DmD,OAAM,SAACC,GAAD,OAASxB,EAASwB,EAAIC,aAwEvB9D,WArEe,SAACS,GACxBT,EAAW,CACTyD,UAAW,CACThD,GAAIA,KAGLiD,MAAK,gBAAGhB,EAAH,EAAGA,KAAH,OAAcR,EAASQ,EAAKiC,eACjCf,OAAM,SAACC,GAAD,OAASxB,EAASwB,EAAIC,wB,SCvE7Bc,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,IAAK,mCAGPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,iBAAD,CAAgBP,OAAQA,EAAxB,UACE,cAACQ,EAAA,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.0d2f53df.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\nconst getAllTodosGraphql = gql`\n  query {\n    getAllTodos {\n      id\n      title\n      completed\n    }\n  }\n`;\n\nconst addTodoGraphql = gql`\n  mutation addTodo($title: TodoInput) {\n    addTodo(todo: $title) {\n      id\n      title\n      completed\n    }\n  }\n`;\n\nconst removeTodoGraphql = gql`\n  mutation removeTodo($id: ID!) {\n    removeTodo(id: $id) {\n      id\n      title\n      completed\n    }\n  }\n`;\n\nconst updateTodoGraphql = gql`\n  mutation updateTodo($id: ID!) {\n    updateTodo(id: $id) {\n      id\n      title\n      completed\n    }\n  }\n`;\n\n/* eslint import/no-anonymous-default-export: [2, {\"allowObject\": true}] */\nexport default {\n  getAllTodosGraphql,\n  addTodoGraphql,\n  removeTodoGraphql,\n  updateTodoGraphql,\n};\n","import React from \"react\";\n\nconst Header: React.FC = (props) => {\n  return (\n    <header>\n      <h1 className=\"logo\">Todos</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import { Checkbox } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Todo } from \"../../interfaces\";\nimport \"./List.css\";\n\ninterface ListProps {\n  todos?: Todo[];\n  removeTodo(id: string): void;\n  toggleTodo(id: string): void;\n}\n\nconst List: React.FC<ListProps> = ({ todos, removeTodo, toggleTodo }) => {\n  if (todos && todos.length !== 0) {\n    return (\n      <ul className=\"todo-list\">\n        {todos.map((el: Todo) => {\n          return (\n            <ListItem\n              key={el.id}\n              dense\n              button\n              divider\n              onClick={() => toggleTodo(el.id)}\n            >\n              <ListItemIcon>\n                <Checkbox checked={el.completed} />\n              </ListItemIcon>\n              <ListItemText\n                primary={el.title}\n                style={\n                  el.completed ? { textDecoration: \"line-through\" } : undefined\n                }\n              />\n              <ListItemSecondaryAction onClick={() => removeTodo(el.id)}>\n                <IconButton className=\"delete-button\">\n                  <DeleteIcon className=\"delete-icon\" />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          );\n        })}\n      </ul>\n    );\n  } else {\n    return <div className=\"addTodos-placeholder\">No todos yet!</div>;\n  }\n};\n\nexport default List;\n","import MuiAlert from \"@material-ui/lab/Alert\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\ninterface Props {\n  error: null | string;\n}\n\nconst Error = ({ error }: Props) => {\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={!!error}\n    >\n      <MuiAlert variant=\"filled\" severity=\"error\">\n        {error}\n      </MuiAlert>\n    </Snackbar>\n  );\n};\n\nexport default Error;\n","import \"./App.css\";\n\nimport React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { useMutation, useQuery } from \"@apollo/client\";\n\nimport { Todo } from \"./interfaces\";\nimport graphqlRequests from \"./graphqlRequests\";\n\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Header from \"./components/Header/Header\";\nimport List from \"./components/List/List\";\nimport Error from \"./components/Error/Error\";\n\nconst {\n  getAllTodosGraphql,\n  addTodoGraphql,\n  removeTodoGraphql,\n  updateTodoGraphql,\n} = graphqlRequests;\nconst App: FunctionComponent = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [input, setInput] = useState<string>(\"\");\n  const [error, setError] = useState<null | string>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { data: allTodos, loading: getAllTodosLoading } = useQuery(\n    getAllTodosGraphql\n  );\n\n  const [addTodo, { loading: addTodoLoading }] = useMutation(addTodoGraphql);\n  const [removeTodo, { loading: removeTodoLoading }] = useMutation(\n    removeTodoGraphql\n  );\n  const [toggleTodo, { loading: toggleTodoLoading }] = useMutation(\n    updateTodoGraphql\n  );\n\n  const handleAddTodo = (evt: React.FormEvent) => {\n    evt.preventDefault();\n    if (!input) {\n      setError(\"Type something\");\n      return;\n    }\n\n    addTodo({\n      variables: {\n        title: { title: input },\n      },\n    })\n      .then(({ data }) => {\n        setTodos((prev) => [data.addTodo, ...prev]);\n      })\n      .catch((err) => setError(err.message));\n\n    setInput(\"\");\n  };\n\n  const handleRemoveTodo = (id: string) => {\n    removeTodo({\n      variables: {\n        id: id,\n      },\n    })\n      .then(() => setTodos((prev) => prev.filter((el) => el.id !== id)))\n      .catch((err) => setError(err.message));\n  };\n\n  const handleToggleTodo = (id: string) => {\n    toggleTodo({\n      variables: {\n        id: id,\n      },\n    })\n      .then(({ data }) => setTodos(data.updateTodo))\n      .catch((err) => setError(err.message));\n  };\n\n  useEffect(() => {\n    if (!allTodos) {\n      return;\n    }\n    setTodos(allTodos?.getAllTodos);\n  }, [allTodos]);\n\n  useEffect(() => {\n    if (error) {\n      setTimeout(() => setError(null), 6000);\n    }\n  }, [error]);\n\n  useEffect(() => {\n    if (\n      addTodoLoading ||\n      removeTodoLoading ||\n      getAllTodosLoading ||\n      toggleTodoLoading === true\n    ) {\n      setLoading(true);\n    } else {\n      setLoading(false);\n    }\n  }, [\n    addTodoLoading,\n    removeTodoLoading,\n    getAllTodosLoading,\n    toggleTodoLoading,\n  ]);\n\n  return (\n    <>\n      {loading ? <LinearProgress className=\"loader\" /> : null}\n      <div className=\"container\">\n        <Header />\n        <Error error={error} />\n\n        <form autoComplete=\"off\" onSubmit={handleAddTodo}>\n          <TextField\n            id=\"standard-basic\"\n            style={{\n              width: \"100%\",\n            }}\n            label=\"Add your todo\"\n            variant=\"standard\"\n            color=\"primary\"\n            value={input}\n            onChange={(evt) => setInput(evt.target.value)}\n          />\n        </form>\n        <CSSTransition\n          in={todos.length !== 0}\n          timeout={250}\n          classNames=\"transition-list\"\n        >\n          <List\n            todos={todos}\n            removeTodo={handleRemoveTodo}\n            toggleTodo={handleToggleTodo}\n          />\n        </CSSTransition>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"http://localhost:3005/graphql?\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <CssBaseline />\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}